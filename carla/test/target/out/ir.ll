; This is a code generated by the Carla programming language

define i32 @main() {
entry:
  %1 = alloca ptr, align 8
  %2 = getelementptr inbounds [14 x i8], ptr @.carla.static.str.0, i32 0, i32 0
  store ptr %2, ptr %1, align 8
  %3 = load ptr, ptr %1, align 8
  %4 = call i32 @stdio.println(ptr %3)
  %5 = alloca i32, align 4
  store i32 0, ptr %5, align 4
  %6 = load i32, ptr %5, align 4
  ret i32 %6
}

@.carla.static.str.0 = private constant [14 x i8] c"Hello, world!\00", align 1

; Extern functions
declare i32 @puts(ptr)
declare i32 @putchar(i32)
declare i32 @sprintf(ptr, ptr, ...)
; stdio Initialized
define void @stdio.println(ptr %0) {
entry:
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  store ptr %0, ptr %2, align 8
  store i32 0, ptr %3, align 4
  %4 = load ptr, ptr %2, align 8
  br label %PRINTLNLOOP

PRINTLNLOOP: ; Início do loop
  %5 = load i32, ptr %3, align 4
  %6 = getelementptr inbounds i8, ptr %4, i32 %5
  %7 = load i8, ptr %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %PRINTLN.END, label %PRINTLN.BODY

PRINTLN.BODY: ; Corpo do loop
  %9 = sext i8 %7 to i32
  %10 = call i32 @putchar(i32 %9)
  %11 = add i32 %5, 1 ; Incrementa o índice
  store i32 %11, ptr %3, align 4
  br label %PRINTLNLOOP ; Volta para o início do loop

PRINTLN.END: ; Fim do loop
  call i32 @putchar(i32 10) ; Imprime uma nova linha
  ret void
}

